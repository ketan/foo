def color = [
    ANSI_BOLD_WHITE: "\u001B[0;1m",
    ANSI_RESET     : "\u001B[0m",
    ANSI_RED       : "\u001B[31m",
    ANSI_GREEN     : "\u001B[32m",
    ANSI_YELLOW    : "\u001B[33m",
    ANSI_WHITE     : "\u001B[37m"
]

def symbols = [
    CHECK_MARK  : "\u2714",
    NEUTRAL_FACE: "\u0CA0_\u0CA0",
    X_MARK      : "\u2718"
]


tasks.withType(Test) {
  maxParallelForks = 1

  testLogging {
    def previousFailed = false
    exceptionFormat 'full'

    beforeSuite { suite ->
      if (suite.name.startsWith("Test Run") || suite.name.startsWith("Gradle Worker")) return

      if (suite.parent != null && suite.className != null) {
        println(color.ANSI_BOLD_WHITE + suite.name + color.ANSI_RESET)
      }
    }

    beforeTest {
      if (previousFailed) {
        System.err.println("")
      }
    }

    afterTest { descriptor, result ->
      previousFailed = false
      def executionTime = (result.endTime - result.startTime) / 1000
      println("    ${resultIndicator(result)}$color.ANSI_RESET $descriptor.name $color.ANSI_YELLOW($executionTime seconds)$color.ANSI_RESET")

      if (result.failedTestCount > 0) {
        previousFailed = true
        println('')
        println(result.exception)
      }
    }

    afterSuite { desc, result ->
      if (desc.parent != null && desc.className != null) {
        println("")
      }

      if (!desc.parent) { // will match the outermost suite
        def failStyle = color.ANSI_RED
        def skipStyle = color.ANSI_YELLOW
        def summaryStyle = summaryStyle(result)

        if (result.failedTestCount > 0) {
          failStyle = color.ANSI_RED
        }
        if (result.skippedTestCount > 0) {
          skipStyle = color.ANSI_YELLOW
        }


        println("--------------------------------------------------------------------------")
        println("Results: $summaryStyle$result.resultType$color.ANSI_RESET ($result.testCount tests, $color.ANSI_GREEN$result.successfulTestCount passed$color.ANSI_RESET, $failStyle$result.failedTestCount failed$color.ANSI_RESET, $skipStyle$result.skippedTestCount skipped$color.ANSI_RESET)")
        println("--------------------------------------------------------------------------")
      }
    }
  }
}


private String summaryStyle(result) {
  def summaryStyle = color.ANSI_WHITE
  switch (result.resultType) {
    case TestResult.ResultType.SUCCESS:
      summaryStyle = color.ANSI_GREEN
      break
    case TestResult.ResultType.FAILURE:
      summaryStyle = color.ANSI_RED
      break
  }
  summaryStyle
}

private String resultIndicator(result) {
  def indicator = color.ANSI_WHITE

  if (result.failedTestCount > 0) {
    indicator = color.ANSI_RED + symbols.X_MARK
  } else if (result.skippedTestCount > 0) {
    indicator = color.ANSI_YELLOW + symbols.NEUTRAL_FACE
  } else {
    indicator = color.ANSI_GREEN + symbols.CHECK_MARK
  }
  indicator
}

